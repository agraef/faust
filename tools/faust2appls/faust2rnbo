#! /bin/bash -e
set -e

#####################################################################
#                                                                   #
#               Compiles Faust programs to RNBO                     #
#               (c) Grame, 20203                                    #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags
. usage.sh

ARCHFILE=$FAUSTARCH/max-msp/rnbo.py
MIDI=False
NVOICES=-1
COMPILE=False
EXPORT_PATH="/tmp/foo"
EXPORT_FILENAME="foo.cpp"
TEST=False
POLY="POLY"
EFFECT=""

echoHelp() 
{
    usage faust2rnbo "[options] [Faust options] <file.dsp>"
    echo  "Compiles Faust programs to RNBO patches"
    option
    options -midi
    option "-nvoices <num>"
    option "-effect <effect.dsp>"
    option "-effect auto"
    option -compile "to trigger C++ compilation at load time"
    option -test "to generate special 'RB_XX' prefix for parameters (for testing)"
    option "-cpp_path <path>"
    option "-cpp_filename <filename>"
    option "Faust options"
    exit
}

if [ "$#" -eq 0 ]; then
    echo 'Please, provide a Faust file to process !'
    echo ''
    echoHelp
fi

#-------------------------------------------------------------------
# dispatch command arguments
#-------------------------------------------------------------------

OPTIONS=""

while [ $1 ]
do
    p=$1

    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echoHelp
    fi

    if [ $p = "-midi" ]; then
        MIDI=True
    elif [ $p = "-nvoices" ]; then
        shift
        NVOICES=$1     
    elif [ $p = "-effect" ]; then
        POLY="POLY2"
        shift
        EFFECT=$1 
    elif [ $p = "-compile" ]; then
        COMPILE=True
    elif [ $p = "-test" ]; then
        TEST=True
    elif [ $p = "-cpp_path" ]; then
        shift
        EXPORT_PATH=$1
    elif [ $p = "-cpp_filename" ]; then
        shift
        EXPORT_FILENAME=$1
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi

shift

done

#-------------------------------------------------------------------
# compile the *.dsp files
#-------------------------------------------------------------------

for f in $FILES; do

    # compile the DSP to codebox using the architecture file
    if [ "$TEST" = "True" ]; then
        faust $OPTIONS "$f" -lang codebox-test -double -json -o "${f%.dsp}.codebox" || exit
        # compile codebox and JSON file to maxpat
        python3 $ARCHFILE "${f%.dsp}" "${f%.dsp}.codebox" "$f.json" "${f%.dsp}.maxpat" $EXPORT_PATH $EXPORT_FILENAME $MIDI $NVOICES $COMPILE $TEST 
    else
        faust $OPTIONS "$f" -lang codebox -double -json -o "${f%.dsp}.codebox" || exit
        if [ $POLY = "POLY2" ]; then
            if [ $EFFECT = "auto" ]; then
                cat > effect.dsp << EndOfCode
                adapt(1,1) = _;
                adapt(2,2) = _,_;
                adapt(1,2) = _ <: _,_;
                adapt(2,1) = _,_ :> _;
                adaptor(F,G) = adapt(outputs(F),inputs(G));
                process = adaptor(library("$f").process, library("$f").effect) : library("$f").effect;
EndOfCode
                faust $OPTIONS effect.dsp -lang codebox -double -json -o effect.codebox || exit
                rm effect.dsp
                # compile codebox and JSON files to maxpat
                python3 $ARCHFILE "${f%.dsp}" "${f%.dsp}.codebox" "$f.json" --arg4 "effect.codebox" --arg5 "effect.dsp.json" "${f%.dsp}.maxpat" $EXPORT_PATH $EXPORT_FILENAME $MIDI $NVOICES $COMPILE $TEST 
            else
                faust $OPTIONS "$EFFECT" -lang codebox -double -json -o "${EFFECT%.dsp}.codebox"  || exit
                # compile codebox and JSON files to maxpat
                python3 $ARCHFILE "${f%.dsp}" "${f%.dsp}.codebox" "$f.json" --arg4 "${EFFECT%.dsp}.codebox" --arg5 "$EFFECT.json" "${f%.dsp}.maxpat" $EXPORT_PATH $EXPORT_FILENAME $MIDI $NVOICES $COMPILE $TEST  
            fi
         else
            # compile codebox and JSON file to maxpat
            python3 $ARCHFILE "${f%.dsp}" "${f%.dsp}.codebox" "$f.json" "${f%.dsp}.maxpat" $EXPORT_PATH $EXPORT_FILENAME $MIDI $NVOICES $COMPILE $TEST 
        fi
    fi
  
    # remove temporary files
    rm -f "${f%.dsp}.codebox" "$f.json"

    # collect binary file name for FaustWorks
    BINARIES="$BINARIES${f%.dsp}.maxpat;"
done

echo $BINARIES

